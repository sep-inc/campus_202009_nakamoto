#ifndef PADDLE_H_
#define PADDLE_H_

/****************************************************
	header
*****************************************************/
#include "ObjectType.h"



/****************************************************
	class
*****************************************************/
/*
	パドルクラス
*/
class Paddle
{
	// パドルの更新ステップ
	enum class PaddleStep
	{
		InitStep,		// 初期化ステップ
		DrawStep,		// 描画ステップ
		ReleaseStep,	// 解放ステップ
	};
public:
	/***************************************************************
		コンストラクター
	****************************************************************/
	Paddle();

	/***************************************************************
		デストラクター
	****************************************************************/
	~Paddle()
	{}
	
	/***************************************************************
		ステップを更新する関数
	****************************************************************/
	void StepUpdate();

	/***************************************************************
		描画関数
	****************************************************************/
	void Draw();

	/***************************************************************
		ゲッター関数
	****************************************************************/
	inline const float GetPosX()  const { return m_PosX;   }
	inline const float GetPosY()  const { return m_PosY;   }
	inline const float GetWidth() const { return m_Width;  }
	inline const float GetHeight()const { return m_Height; }

private:
	/***************************************************************
		初期化関数
	****************************************************************/
	void Initializ();

	/***************************************************************
		移動関数
	****************************************************************/
	void Move();

	/***************************************************************
		次に移動する座標を求める関数
	****************************************************************/
	void CalcNextPos();

	/***************************************************************
		次に移動する座標が壁と当たっているかを判定する関数
	****************************************************************/
	void HitWall();

	/***************************************************************
		右壁と当たっているかを判定する関数
	****************************************************************/
	bool HitRightWall();

	/***************************************************************
		左壁と当たっているかを判定する関数
	****************************************************************/
	bool HitLeftWall();

private:

	// X座標
	float m_PosX;

	// Y座標
	float m_PosY;

	// 次に進むX軸
	// 横にしか動かないためYは定義しない
	float m_NextPosX;

	// X軸移動ベクトル 単位ベクトル
	// 横にしか動かないためYベクトルは定義しない
	float m_MoveVecX;

	// 速度　1/60フレームで進む量
	const float m_Speed;

	// 横幅
	const __int8 m_Width;

	// 縦幅
	const __int8 m_Height;

	// オブジェクトの種類
	const __int8 m_Type;

	// パドルの現在のSTEPを保存する変数
	PaddleStep m_CurrentStep;
};


#endif