#ifndef BALL_H_
#define BALL_H_

/****************************************************
	header
*****************************************************/
#include "ObjectType.h"


/****************************************************
	class
*****************************************************/
/*
	球クラス
*/
class Ball
{
	// ボールの更新ステップ
	enum class BallStep
	{
		InitStep,		// 初期化ステップ
		DrawStep,		// 描画ステップ
		ReleaseStep,	// 解放ステップ
	};

public:
	/***************************************************************
		コンストラクター
	****************************************************************/
	Ball();

	/***************************************************************
		デストラクター
	****************************************************************/
	~Ball()
	{}
	
	/***************************************************************
		ステップを更新する関数
	****************************************************************/
	void StepUpdate();

	/***************************************************************
		描画関数
	****************************************************************/
	void Draw();

private:


	/***************************************************************
		初期化関数
	****************************************************************/
	void Initializ();

	/***************************************************************
		移動関数
	****************************************************************/
	void Move();

	/***************************************************************
		次に移動する座標を求める関数
	****************************************************************/
	void CalcNextPos();

	/***************************************************************
		次に移動する座標が壁と当たっているかを判定する関数
	****************************************************************/
	void HitWall();

	/***************************************************************
		次に移動する座標がパドルと当たっているかを判定する関数
	****************************************************************/
	void HitPaddle();

	/***************************************************************
		次に移動する座標が壁と当たっているかを判定する関数
	****************************************************************/
	void HitBlock();

	/***************************************************************
		次に移動する座標を求める関数
	****************************************************************/
	bool HitTopWall();

	/***************************************************************
		次に移動する座標を求める関数
	****************************************************************/
	bool HitBottomWall();

	/***************************************************************
		次に移動する座標を求める関数
	****************************************************************/
	bool HitRightWall();

	/***************************************************************
		次に移動する座標を求める関数
	****************************************************************/
	bool HitLeftWall();

	/***************************************************************
		次に移動する座標を求める関数
	****************************************************************/
	bool HitBlockTopOrBottom();

	/***************************************************************
		次に移動する座標を求める関数
	****************************************************************/
	bool HitBlockLeftOrRight();


private:
	// 中心点座標X
	float m_CenterPosX;

	// 中心点座標Y
	float m_CenterPosY;

	// 次の中心点座標X
	float m_NextPosX;

	// 次の中心点座標Y
	float m_NextPosY;

	// X軸移動ベクトル
	float m_MoveVecX;

	// Y軸移動ベクトル
	float m_MoveVecY;

	// 半径
	const float m_Radius;

	// 速度 1/60フレームの速度
	const float m_Speed;

	// オブジェクトの種類
	const __int8 m_Type;

	// ボールの現在のSTEPを保存する変数
	BallStep m_CurrentStep;
};

#endif